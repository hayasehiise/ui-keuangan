/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LoginRouteRouteImport } from './routes/login/route'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as LayoutIndexRouteImport } from './routes/_layout.index'
import { Route as LayoutUserRouteImport } from './routes/_layout.user'
import { Route as LayoutProdukRouteImport } from './routes/_layout.produk'

const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRouteRoute = LoginRouteRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LoginRouteRoute,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutUserRoute = LayoutUserRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutProdukRoute = LayoutProdukRouteImport.update({
  id: '/produk',
  path: '/produk',
  getParentRoute: () => LayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRouteRouteWithChildren
  '/produk': typeof LayoutProdukRoute
  '/user': typeof LayoutUserRoute
  '/': typeof LayoutIndexRoute
  '/login/': typeof LoginIndexRoute
}
export interface FileRoutesByTo {
  '/produk': typeof LayoutProdukRoute
  '/user': typeof LayoutUserRoute
  '/': typeof LayoutIndexRoute
  '/login': typeof LoginIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/login': typeof LoginRouteRouteWithChildren
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/produk': typeof LayoutProdukRoute
  '/_layout/user': typeof LayoutUserRoute
  '/_layout/': typeof LayoutIndexRoute
  '/login/': typeof LoginIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/produk' | '/user' | '/' | '/login/'
  fileRoutesByTo: FileRoutesByTo
  to: '/produk' | '/user' | '/' | '/login'
  id:
    | '__root__'
    | '/login'
    | '/_layout'
    | '/_layout/produk'
    | '/_layout/user'
    | '/_layout/'
    | '/login/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LoginRouteRoute: typeof LoginRouteRouteWithChildren
  LayoutRoute: typeof LayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/'
      fullPath: '/login/'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof LoginRouteRoute
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/user': {
      id: '/_layout/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof LayoutUserRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/produk': {
      id: '/_layout/produk'
      path: '/produk'
      fullPath: '/produk'
      preLoaderRoute: typeof LayoutProdukRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}

interface LoginRouteRouteChildren {
  LoginIndexRoute: typeof LoginIndexRoute
}

const LoginRouteRouteChildren: LoginRouteRouteChildren = {
  LoginIndexRoute: LoginIndexRoute,
}

const LoginRouteRouteWithChildren = LoginRouteRoute._addFileChildren(
  LoginRouteRouteChildren,
)

interface LayoutRouteChildren {
  LayoutProdukRoute: typeof LayoutProdukRoute
  LayoutUserRoute: typeof LayoutUserRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutProdukRoute: LayoutProdukRoute,
  LayoutUserRoute: LayoutUserRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LoginRouteRoute: LoginRouteRouteWithChildren,
  LayoutRoute: LayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
